import os
import time
import json
import requests
import math
import psutil
import random
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
import subprocess
import telegram
import asyncio
from collections import defaultdict
from datetime import datetime, timedelta

# -----–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª–∏ –±—É–ª–∏ –∑–º—ñ–Ω–∏ –ø–æ ADV------
def is_adv_outdated(date_str, max_age_days=10):
    try:
        adv_date = datetime.strptime(date_str, "%Y-%m-%d")
        return datetime.now() - adv_date > timedelta(days=max_age_days)
    except Exception:
        return True

load_dotenv()

# ----------–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ì—É–≥–ª–•—Ä–æ–º--------
def is_chrome_running_with_debugging():
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if 'Google Chrome' in proc.info['name'] and '--remote-debugging-port=9222' in ' '.join(proc.info['cmdline']):
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue
    return False


USERNAME = os.getenv("LOGIN")
PASSWORD = os.getenv("PASSWORD")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
bot = telegram.Bot(token=TELEGRAM_TOKEN)


if not is_chrome_running_with_debugging():
    print("üß≠ Chrome –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∑ remote-debugging. –ó–∞–ø—É—Å–∫–∞—î–º–æ...")
    chrome_path = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    user_data_dir = os.path.expanduser("~/chrome-selenium")
    target_url = "http://www.amerxmocs.com/Default.aspx?index="
    subprocess.Popen([
        chrome_path,
        "--remote-debugging-port=9222",
        f"--user-data-dir={user_data_dir}",
        "--new-window",
        target_url
    ])
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–æ—Ç—è–≥–æ–º 20 —Å–µ–∫—É–Ω–¥
    for _ in range(20):
        if is_chrome_running_with_debugging():
            break
        time.sleep(1)
    else:
        print("‚ùå Chrome –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –≤—á–∞—Å–Ω–æ!")
        exit(1)
else:
    print("üü¢ Chrome –≤–∂–µ –ø—Ä–∞—Ü—é—î –∑ remote-debugging.")

chrome_options = Options()
chrome_options.add_argument("--remote-debugging-port=9222")
chrome_options.add_argument(f"--user-data-dir={os.path.expanduser('~')}/chrome-selenium")
chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")


# --------GIT PUSH---------
def git_commit_and_push():
    try:
        subprocess.run(["git", "add", "."], check=True)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —â–æ –∫–æ–º—ñ—Ç–∏—Ç–∏
        result = subprocess.run(["git", "diff", "--cached", "--quiet"])
        if result.returncode == 0:
            print("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É.")
            return

        subprocess.run(
            ["git", "commit", "-m", "üîÑ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è imbalance –¥–∞–Ω–∏—Ö"], check=True)
        subprocess.run(["git", "push"], check=True)
        print("‚úÖ –ó–º—ñ–Ω–∏ –∑–∞–ø—É—à–µ–Ω–æ –Ω–∞ GitHub.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git –ø–æ–º–∏–ª–∫–∞: {e}")


# -----------Finviz--------
def get_adv_from_finviz(symbol, cache):
    if any(char in symbol for char in ['.', '-', ' ']):
        # print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏. ADV = 0")
        cache[symbol] = {
            "adv": 0,
            "date": datetime.now().strftime("%Y-%m-%d")
        }
        return 0

    cache_entry = cache.get(symbol)
    if cache_entry and isinstance(cache_entry, dict):
        if not is_adv_outdated(cache_entry.get("date", ""), 10) and cache_entry.get("adv", 0) > 0:
            return cache_entry["adv"]

    # –Ü–Ω–∞–∫—à–µ ‚Äî –ø–∞—Ä—Å–∏–º–æ Finviz
    try:
        url = f"https://finviz.com/quote.ashx?t={symbol}&p=d"
        headers = {
            "User-Agent": "Mozilla/5.0",
            "Accept-Language": "en-US,en;q=0.9",
        }
        response = requests.get(url, headers=headers, timeout=15)
        time.sleep(random.uniform(1.5, 3.5))

        if response.status_code == 429:
            print(f"üö´ Finviz –∑–∞–±–ª–æ–∫—É–≤–∞–≤: 429 –¥–ª—è {symbol}")
            return cache_entry["adv"] if cache_entry else 0

        if response.status_code != 200:
            print(f"‚ö†Ô∏è Finviz —Å—Ç–∞—Ç—É—Å {response.status_code} –¥–ª—è {symbol}")
            return 0

        soup = BeautifulSoup(response.text, "html.parser")
        table = soup.find("table", class_="snapshot-table2")
        if not table:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}")
            return 0

        for row in table.find_all("tr"):
            cells = row.find_all("td")
            for i in range(len(cells)):
                if cells[i].text.strip() == "Avg Volume":
                   volume_str = cells[i+1].text.strip().replace(",", "")
                   try:
                       if volume_str.endswith("M"):
                           adv = int(float(volume_str[:-1]) * 1_000_000)
                       elif volume_str.endswith("K"):
                           adv = int(float(volume_str[:-1]) * 1_000)
                       else:
                           adv = int(volume_str)

                       cache[symbol] = {
                           "adv": adv,
                           "date": datetime.now().strftime("%Y-%m-%d")
                       }
                       return adv
                   except ValueError:
                       print(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –æ–±—Å—è–≥ –¥–ª—è {symbol}: '{volume_str}'")
                       return 0
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ADV –¥–ª—è {symbol}: {e}")

    return 0

# -----------–ü–∞—Ä—Å —Å—Ç–æ—Ä—ñ–Ω–∫–∏---------


def parse_table_from_message_table(soup, driver):
    while True:
        table = soup.find("table", id="MainContent_MessageTable")
        if table:
            break
        print("üïí –¢–∞–±–ª–∏—Ü—è —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
        time.sleep(60)
        soup = BeautifulSoup(driver.page_source, "html.parser")

    rows = table.find_all("tr")
    archive_buy = defaultdict(lambda: [["Update Time", "Imbalance", "Paired"]])
    archive_sell = defaultdict(
        lambda: [["Update Time", "Imbalance", "Paired"]])
    latest_buy = {}
    latest_sell = {}

    active_symbols_buy = set()
    active_symbols_sell = set()

    for row in rows[1:]:
        cells = row.find_all("td")
        if len(cells) < 5:
            continue

        time_val = cells[0].text.strip()
        symbol_tag = cells[1].find("a")
        symbol = symbol_tag.text.strip(
        ) if symbol_tag else cells[1].text.strip()
        side = cells[2].text.strip()
        imbalance = int(cells[3].text.strip().replace(
            ",", "")) if cells[3].text.strip() else 0
        paired = int(cells[4].text.strip().replace(
            ",", "")) if cells[4].text.strip() else 0

        # –î–æ–¥–∞—î–º–æ –¥–æ –∞—Ä—Ö—ñ–≤—É –∑–∞–≤–∂–¥–∏
        target_archive = archive_buy if side == "B" else archive_sell
        target_archive[symbol].append([time_val, imbalance, paired])

        # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        if side == "B":
            active_symbols_buy.add(symbol)
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –∑–∞–ø–∏—Å
            if symbol not in latest_buy or time_val > latest_buy[symbol][0]:
                latest_buy[symbol] = (time_val, imbalance, paired)
        else:
            active_symbols_sell.add(symbol)
            if symbol not in latest_sell or time_val > latest_sell[symbol][0]:
                latest_sell[symbol] = (time_val, imbalance, paired)

    # üìö –°–æ—Ä—Ç—É—î–º–æ –∞—Ä—Ö—ñ–≤–∏ –∑–∞ —á–∞—Å–æ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    for archive in (archive_buy, archive_sell):
        for symbol, records in archive.items():
            if len(records) > 1:
                header, *data_rows = records
                # —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
                sorted_rows = sorted(data_rows, key=lambda r: r[0])
                archive[symbol] = [header] + sorted_rows

    # –§–æ—Ä–º—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ª–∏—à–µ –¥–ª—è —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ —î –∑–∞—Ä–∞–∑ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    main_buy = [["Update Time", "Symbol",
                 "Imbalance", "Paired", "ADV", "% ImbADV"]]
    for symbol in active_symbols_buy:
        t, imb, paired = latest_buy[symbol]
        main_buy.append([t, symbol, imb, paired, "", ""])

    main_sell = [["Update Time", "Symbol",
                  "Imbalance", "Paired", "ADV", "% ImbADV"]]
    for symbol in active_symbols_sell:
        t, imb, paired = latest_sell[symbol]
        main_sell.append([t, symbol, imb, paired, "", ""])

    return {
        "buy": {"main": main_buy, "archive": dict(archive_buy)},
        "sell": {"main": main_sell, "archive": dict(archive_sell)}
    }
# ----------–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è----------
async def send_telegram_message(message):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        print("üì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É Telegram")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: {e}")


# ---------–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ª–æ–≥—ñ–Ω –Ω–µ –≤—Ç—Ä–∞—á–µ–Ω–∏–π –ø—ñ–¥—á–∞—Å —Å–µ—Å—ñ—ó---------
def is_logged_in(driver):
    return "Account/Login.aspx" not in driver.current_url

async def perform_login(driver):
    print("üîì –°–µ—Å—ñ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–Ω...")
    driver.get("http://www.amerxmocs.com/Account/Login.aspx")

    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC

    for attempt in range(20):
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.ID, "MainContent_UserName"))
            )
            driver.find_element(By.ID, "MainContent_UserName").clear()
            driver.find_element(
                By.ID, "MainContent_UserName").send_keys(USERNAME)
            driver.find_element(By.ID, "MainContent_Password").clear()
            driver.find_element(
                By.ID, "MainContent_Password").send_keys(PASSWORD)
            driver.find_element(By.ID, "MainContent_LoginButton").click()
            await asyncio.sleep(3)
            print("‚úÖ –õ–æ–≥—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–±–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...")
            break
        except Exception:
            print(
                f"‚è≥ –õ–æ–≥—ñ–Ω —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ({attempt+1}/20). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
            await asyncio.sleep(60)
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –ø—ñ—Å–ª—è 20 —Å–ø—Ä–æ–±. –í–∏—Ö—ñ–¥.")
        return False
    return True

# ---------–•—Ä–æ–º –¥—Ä–∞–π–≤–µ—Ä----------
async def start_driver_with_retry(max_retries=3):
    for attempt in range(1, max_retries + 1):
        try:
            driver = webdriver.Chrome(
                service=Service(), options=chrome_options)
            # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            driver.set_page_load_timeout(60)
            print(f"üü¢ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt}.")
            return driver
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥—Ä–∞–π–≤–µ—Ä–∞ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt}: {e}")
            if attempt < max_retries:
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(10)
            else:
                print("‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω—ñ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞.")
                raise e

# ---------–õ–æ–≥—ñ–Ω –Ω–∞ —Å–∞–π—Ç—ñ www.amerxmocs.com----------
async def main():
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC

    try:
        driver = await start_driver_with_retry()
        print("üîê –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó...")
        driver.get("http://www.amerxmocs.com/Default.aspx?index=")
        await asyncio.sleep(3)

        if "Account/Login.aspx" in driver.current_url:
            print("üîì –°–µ—Å—ñ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–≥—ñ–Ω...")
            driver.get("http://www.amerxmocs.com/Account/Login.aspx")

            for attempt in range(20):
                try:
                    WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located(
                            (By.ID, "MainContent_UserName"))
                    )
                    driver.find_element(By.ID, "MainContent_UserName").clear()
                    driver.find_element(
                        By.ID, "MainContent_UserName").send_keys(USERNAME)
                    driver.find_element(By.ID, "MainContent_Password").clear()
                    driver.find_element(
                        By.ID, "MainContent_Password").send_keys(PASSWORD)
                    driver.find_element(
                        By.ID, "MainContent_LoginButton").click()
                    await asyncio.sleep(3)
                    print("‚úÖ –õ–æ–≥—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–±–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...")
                    break
                except Exception:
                    print(
                        f"‚è≥ –õ–æ–≥—ñ–Ω —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ({attempt+1}/20). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
                    await asyncio.sleep(60)
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—å –ø—ñ—Å–ª—è 20 —Å–ø—Ä–æ–±. –í–∏—Ö—ñ–¥.")
                return
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥—Ä–∞–π–≤–µ—Ä–∞ –∞–±–æ –ª–æ–≥—ñ–Ω—É: {e}")
        return

    while True:
        if not is_logged_in(driver):
             print("‚ÑπÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó...")
             success = await perform_login(driver)
             if not success:
                 break
        html = driver.page_source
        with open("debug_page.html", "w", encoding="utf-8") as f:
            f.write(html)

        soup = BeautifulSoup(html, "html.parser")
        parsed = parse_table_from_message_table(soup, driver)

        adv_cache = {}
        if os.path.exists("adv_cache.json"):
            try:
                with open("adv_cache.json") as f:
                    adv_cache = json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–µ—à: {e}")
                adv_cache = {}

        for kind in ("buy", "sell"):
            data = parsed[kind]
            for i in range(1, len(data["main"])):
                row = data["main"][i]
                symbol = row[1]
                imbalance = float(row[2])
                adv = get_adv_from_finviz(symbol, adv_cache)
                row[4] = str(adv)
                row[5] = str(math.ceil(imbalance / adv * 100)) if adv else "0"

            with open(f"{kind}_data.json", "w") as f:
                json.dump(data, f, indent=2)

            prev_file = f"prev_{kind}.json"
            last_sent_map = {}

            if os.path.exists(prev_file):
               try:
                   with open(prev_file) as f:
                       prev_data = json.load(f)
                       for prev_row in prev_data.get("main", [])[1:]:
                           symbol = prev_row[1]
                           val = prev_row[5]
                           if isinstance(val, int):
                               sent_percent = val
                           elif isinstance(val, str) and val.isdigit():
                               sent_percent = int(val)
                           else:
                               sent_percent = 0
                           last_sent_map[symbol] = sent_percent
               except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ {prev_file}: {e}")

            for row in data["main"][1:]:
                symbol = row[1]
                imbalance = int(row[2])
                paired = int(row[3]) if isinstance(row[3], str) and row[3].isdigit() else int(row[3]) if isinstance(row[3], int) else 0
                adv = int(row[4]) if row[4].isdigit() else 0
                percent = int(row[5]) if row[5].isdigit() else 0

                last_sent = last_sent_map.get(symbol, 0)
                if percent >= 95 and (last_sent == 0 or percent >= last_sent + 10):
                    print(f"{symbol}: now={percent}%, last={last_sent} ‚Üí –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ")
                    if kind == "buy":
                        arrow = "üü¢‚¨ÜÔ∏è"
                        side = "Buy"
                    else:
                        arrow = "üî¥‚¨áÔ∏è"
                        side = "Sell"
                    msg = f"{arrow} {side}  |  {symbol}\nImbalance: {imbalance:,}\nPaired: {paired:,}\nADV: {adv:,}\n% ImbADV: {percent}%"

                    if last_sent > 0:
                        diff = percent - last_sent
                        msg += f" (+{diff}%)"
                    await send_telegram_message(msg)
                    last_sent_map[symbol] = percent

                opposite_kind = "sell" if kind == "buy" else "buy"
                opposite_prev_file = f"prev_{opposite_kind}.json"
                opposite_prev_symbols = {}
                if os.path.exists(opposite_prev_file):
                    try:
                        with open(opposite_prev_file) as f:
                            opp_data = json.load(f)
                            opposite_prev_symbols = {
                                r[1]: True for r in opp_data.get("main", [])[1:]
                            }
                    except Exception:
                        opposite_prev_symbols = {}

                # A–∫—Ü—ñ—ó –∑ –î–ï–§–Ü–°–û–ú
                dash_file = f"dash_notified_{kind}.json"
                notified_dash_symbols = set()
                if os.path.exists(dash_file):
                    try:
                        with open(dash_file) as f:
                            notified_dash_symbols = set(json.load(f))
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ {dash_file}: {e}")
                
                if "-" in symbol and symbol not in notified_dash_symbols:
                    if kind == "buy":
                        arrow = "üü¢‚¨ÜÔ∏è"
                        side = "Buy"
                    else:
                        arrow = "üî¥‚¨áÔ∏è"
                        side = "Sell"
                    msg = f"{arrow} {side} ‚ö†Ô∏è–î–ï–§–Ü–°  |  {symbol}\nImbalance: {imbalance:,}\nPaired: {paired:,}"
                    await send_telegram_message(msg)
                    notified_dash_symbols.add(symbol)

                with open(dash_file, "w") as f:
                     json.dump(list(notified_dash_symbols), f, indent=2)

                # –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ BUY ‚Üî SELL –∑ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—é
                flip_file = f"flip_notified_{kind}.json"
                flip_notified = {}
                if os.path.exists(flip_file):
                    try:
                        with open(flip_file) as f:
                            flip_notified = json.load(f)
                    except Exception:
                        flip_notified = {}

                if percent > 80 and symbol in opposite_prev_symbols:
                    if not flip_notified.get(symbol):
                        direction = "üü¢BUY ‚Üí üî¥SELL" if kind == "sell" else "üî¥SELL ‚Üí üü¢BUY"
                        msg = f"üîÑ –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ {direction}  |  {symbol}\nImbalance: {imbalance:,}\nPaired: {paired:,}\nADV: {adv:,}\n% ImbADV: {percent}%"
                        await send_telegram_message(msg)
                        flip_notified[symbol] = True

                with open(flip_file, "w") as f:
                   json.dump(flip_notified, f, indent=2)

            # üî• –§–æ—Ä–º—É—î–º–æ –Ω–æ–≤—ñ prev_* —Ç—ñ–ª—å–∫–∏ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –∞–±–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∞–∫—Ü—ñ—è–º–∏
            new_prev_main = [["Update Time", "Symbol","Imbalance", "Paired", "ADV", "% ImbADV"]]

            for row in data["main"][1:]:
                symbol = row[1]
                imbalance = int(row[2])
                paired = int(row[3]) if isinstance(row[3], str) and row[3].isdigit() else int(row[3]) if isinstance(row[3], int) else 0
                adv = int(row[4]) if isinstance(row[4], str) and row[4].isdigit() else int(
                row[4]) if isinstance(row[4], int) else 0
                percent = last_sent_map.get(symbol, 0)

                new_prev_main.append([row[0], symbol, imbalance, paired, adv, percent])

            prev_data = {
                 "main": new_prev_main,
                 "archive": {}
            }

            with open(prev_file, "w") as f:
                json.dump(prev_data, f, indent=2)

        with open("adv_cache.json", "w") as f:
            json.dump(adv_cache, f, indent=2)

        # üëâ Git Push –≤ –∫—ñ–Ω—Ü—ñ —Å–∫—Ä–∏–ø—Ç—É
        print("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É buy_data.json —Ç–∞ sell_data.json")
        git_commit_and_push()

        now = datetime.now()
        if now.hour == 23:
            print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –æ 23:00")

            # üëâ –†–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º
            try:
                logout_btn = driver.find_element(By.ID, "MainContent_LogOut")
                logout_btn.click()
                print("üö™ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω–æ –∑ —Å–∞–π—Ç—É.")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è: {e}")

            # üëâ –ó–∞–ø—É—Å–∫ reset_data
            reset_script = "/Users/mihajloflunt/Desktop/Home/–ù–∞–≤—á–∞–Ω–Ω—è/GOIT/Trading/reset_data.sh"
            if os.path.exists(reset_script):
                try:
                    print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ reset_data.sh...")
                    subprocess.run(["/bin/bash", reset_script], check=True)
                    print("‚úÖ reset_data.sh –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
                except subprocess.CalledProcessError as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è reset_data.sh: {e}")
            else:
                print("‚ùå –§–∞–π–ª reset_data.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            break

        await asyncio.sleep(30)

if __name__ == "__main__":
    asyncio.run(main())